image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12"

stages:
  - setup
  - static_analysis
  - test
  - build
  - integration_test
  - security_analysis
  - publish

variables:
  POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/poetry"

.poetry cache:
  stage: setup
  script:
    - time poetry install --remove-untracked --no-ansi
  cache:
    key: "python-${CI_COMMIT_REF_SLUG}"  # Prevent cache poisoning
    policy: pull-push
    paths:
      - .cache/poetry/
  except:
    - main
    - tags

poetry cache py3.7:
  extends: .poetry cache
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.7"
  cache:
    key: "py37-${CI_COMMIT_REF_SLUG}"

poetry cache py3.8:
  extends: .poetry cache
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.8"
  cache:
    key: "py38-${CI_COMMIT_REF_SLUG}"

poetry cache py3.9:
  extends: .poetry cache
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.9"
  cache:
    key: "py39-${CI_COMMIT_REF_SLUG}"

poetry cache py3.10:
  extends: .poetry cache
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.10"
  cache:
    key: "py310-${CI_COMMIT_REF_SLUG}"

poetry cache py3.11rc:
  extends: .poetry cache
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.11rc"
  allow_failure: true
  cache:
    key: "py311rc-${CI_COMMIT_REF_SLUG}"

poetry cache pypy3.7:
  extends: .poetry cache
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.7pypy"
  script:
    # Running `poetry install` fails because `mypy` uses `typed_ast` which doesn't
    # build in PyPy and probably never will, see:
    # https://github.com/python/typed_ast/issues/111
    - time poetry remove --no-ansi --dev mypy  # Runs install by itself
  cache:
    key: "pypy37-${CI_COMMIT_REF_SLUG}"
  allow_failure: true

poetry cache pypy3.8:
  extends: .poetry cache
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.8pypy"
  script:
    # Running `poetry install` fails because `mypy` uses `typed_ast` which doesn't
    # build in PyPy and probably never will, see:
    # https://github.com/python/typed_ast/issues/111
    - time poetry remove --no-ansi --dev mypy  # Runs install by itself
  cache:
    key: "pypy38-${CI_COMMIT_REF_SLUG}"
  allow_failure: true

poetry cache stackless3.7:
  extends: .poetry cache
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.7stackless"
  cache:
    key: "stackless37-${CI_COMMIT_REF_SLUG}"
  allow_failure: true

poetry cache stackless3.8:
  extends: .poetry cache
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.8stackless"
  cache:
    key: "stackless38-${CI_COMMIT_REF_SLUG}"
  allow_failure: true

python lint:
  stage: static_analysis
  needs:
    - poetry cache py3.10
  script:
    - time poetry run inv reformat
    - changes="$(git status --porcelain=v2 2>/dev/null)"
    - if [ -n "$changes" ]; then printf "Code is not properly formatted\n%s" "$changes"; exit 1; fi
    - time poetry run inv lint
  cache:
    key: "py310-${CI_COMMIT_REF_SLUG}"
    policy: pull
    paths:
      - .cache/poetry/
  except:
    - main
    - tags

packages security:
  stage: static_analysis
  needs:
    - poetry cache py3.10
  script:
    - time poetry export -f requirements.txt -o requirements.txt --dev
    - time poetry run safety check --full-report -r requirements.txt
  cache:
    key: "py310-${CI_COMMIT_REF_SLUG}"
    policy: pull
    paths:
      - .cache/poetry/
  except:
    - main
    - tags

.tests:
  stage: test
  script:
    - time poetry run inv tests
  cache:
    key: "python-${CI_COMMIT_REF_SLUG}"
    policy: pull
    paths:
      - .cache/poetry/
  except:
    - main
    - tags

tests py3.7:
  extends: .tests
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.7"
  needs:
    - poetry cache py3.7
    - python lint
    - packages security
  cache:
    key: "py37-${CI_COMMIT_REF_SLUG}"

tests py3.8:
  extends: .tests
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.8"
  needs:
    - poetry cache py3.8
    - python lint
    - packages security
  cache:
    key: "py38-${CI_COMMIT_REF_SLUG}"

tests py3.9:
  extends: .tests
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.9"
  needs:
    - poetry cache py3.9
    - python lint
    - packages security
  cache:
    key: "py39-${CI_COMMIT_REF_SLUG}"

tests py3.10:
  extends: .tests
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.10"
  needs:
    - poetry cache py3.10
    - python lint
    - packages security
  cache:
    key: "py310-${CI_COMMIT_REF_SLUG}"

tests py3.11rc:
  extends: .tests
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.11rc"
  needs:
    - poetry cache py3.11rc
    - python lint
    - packages security
  cache:
    key: "py311rc-${CI_COMMIT_REF_SLUG}"
  allow_failure: true

tests pypy3.7:
  extends: .tests
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.7pypy"
  needs:
    - poetry cache pypy3.7
    - python lint
    - packages security
  cache:
    key: "pypy37-${CI_COMMIT_REF_SLUG}"
  allow_failure: true

tests pypy3.8:
  extends: .tests
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.8pypy"
  needs:
    - poetry cache pypy3.8
    - python lint
    - packages security
  cache:
    key: "pypy38-${CI_COMMIT_REF_SLUG}"
  allow_failure: true

tests stackless3.7:
  extends: .tests
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.7stackless"
  needs:
    - poetry cache stackless3.7
    - python lint
    - packages security
  script:
    - time poetry run pytest --no-cov  # with coverage is segfaulting for some reason
  cache:
    key: "stackless37-${CI_COMMIT_REF_SLUG}"
  allow_failure: true

tests stackless3.8:
  extends: .tests
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.12-3.8stackless"
  needs:
    - poetry cache stackless3.8
    - python lint
    - packages security
  script:
    - time poetry run pytest --no-cov  # with coverage is segfaulting for some reason
  cache:
    key: "stackless38-${CI_COMMIT_REF_SLUG}"
  allow_failure: true

# https://aquasecurity.github.io/trivy/v0.18.0/integrations/gitlab-ci/
security scanning:
  stage: security_analysis
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [ "" ]
  needs:
    - packages security
  script:
    - trivy --version
    # update vulnerabilities db
    - time trivy --cache-dir .trivycache/ --download-db-only --no-progress
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy --cache-dir .cache/trivy/ fs --exit-code 0 --no-progress --format template --template "@/contrib/gitlab.tpl" --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" .
    # Prints full report
    - time trivy --cache-dir .cache/trivy/ fs --exit-code 0 --no-progress .
    # Fails on every vulnerability that can be fixed
    - time trivy --cache-dir .cache/trivy/ fs --exit-code 1 --ignore-unfixed --no-progress .
  cache:
    key: "trivy-${CI_COMMIT_REF_SLUG}"
    paths:
      - .cache/trivy/
    policy: pull-push
  artifacts:
    reports:
      # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/
      # (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
      container_scanning: gl-container-scanning-report.json
  except:
    variables:
      - $CONTAINER_SCANNING_DISABLED
    refs:
      - tags
      - main

publish test:
  stage: publish
  script:
    - MAX_TRIES=${PUBLISH_TEST_MAX_TRIES:-10}
    - poetry config repositories.testpypi https://test.pypi.org/legacy/
    - poetry config pypi-token.testpypi "$POETRY_PYPI_TOKEN_TESTPYPI"
    - count=0; while [ $count -lt $MAX_TRIES ]; do printf "Attempt %d of %d\n" "$((count + 1))" "$MAX_TRIES"; sleep "$((count / 2))"; poetry version prerelease && poetry publish --build -r testpypi && break || let "count+=1"; done
    - sha256sum dist/*
    - sha512sum dist/*
    - if [ $count -ge $MAX_TRIES ]; then exit 1; fi
  only:
    - /^release\/.+$/

publish:
  stage: publish
  script:
    - poetry config pypi-token.pypi "$POETRY_PYPI_TOKEN_PYPI"
    - poetry publish --build
    - sha256sum dist/*
    - sha512sum dist/*
  only:
    - tags
