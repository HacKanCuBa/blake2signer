image: "docker:19.03.13"

stages:
  - static_analysis
  - test
  - build
  - integration_test
  - security_analysis
  - publish

python lint:
  stage: static_analysis
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.4"
  variables:
    INVOKE_RUN_SHELL: /bin/ash
    POETRY_VIRTUALENVS_CREATE: 0
  before_script:
    - poetry install
  script:
    - inv reformat
    - changes="$(git status --porcelain=v2 2>/dev/null)"
    - if [ -n "$changes" ]; then printf "Code is not properly formatted\n%s" "$changes"; exit 1; fi
    - inv lint
  except:
    - main
    - tags
    - feature/deploy

packages security:
  stage: static_analysis
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.4"
  before_script:
    - pip install safety
  script:
    - poetry export -f requirements.txt -o requirements.txt --dev
    - safety check --full-report -r requirements.txt
  except:
    - main
    - tags
    - feature/deploy

tests py3.9:
  stage: test
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.4"
  variables:
    INVOKE_RUN_SHELL: /bin/ash
    POETRY_VIRTUALENVS_CREATE: 0
  before_script:
    - poetry install
  script:
    - inv tests
  except:
    - main
    - tags
    - feature/deploy

tests py3.8:
  stage: test
  image: "python:3.8-slim"
  variables:
    INVOKE_RUN_SHELL: /bin/bash
    POETRY_VIRTUALENVS_CREATE: 0
  before_script:
    - apt update
    - apt install -qy git build-essential libffi-dev
    - pip install poetry
    - poetry install
  script:
    - inv tests
  except:
    - main
    - tags
    - feature/deploy

tests py3.7:
  stage: test
  image: "python:3.7-slim"
  variables:
    INVOKE_RUN_SHELL: /bin/bash
    POETRY_VIRTUALENVS_CREATE: 0
  before_script:
    - apt update
    - apt install -qy git build-essential libffi-dev
    - pip install poetry
    - poetry install
  script:
    - inv tests
  except:
    - main
    - tags
    - feature/deploy

tests py3.10:
  stage: test
  image: "python:3.10-rc-slim"  # python bug can't build wheel so alpine doesn't work
  variables:
    INVOKE_RUN_SHELL: /bin/bash
    POETRY_VIRTUALENVS_CREATE: 0
  allow_failure: true
  before_script:
    - apt update
    - apt install -qy git build-essential libffi-dev
    - pip install poetry
    - poetry install
  script:
    - inv tests
  except:
    - main
    - tags
    - feature/deploy

publish test:
  stage: publish
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.4"
  variables:
    POETRY_VIRTUALENVS_CREATE: 0
  script:
    - MAX_TRIES=${PUBLISH_TEST_MAX_TRIES:-10}
    - poetry config repositories.testpypi https://test.pypi.org/legacy/
    - poetry config pypi-token.testpypi "$POETRY_PYPI_TOKEN_TESTPYPI"
    - count=0; while [ $count -lt $MAX_TRIES ]; do printf "Attempt %d of %d\n" "$((count + 1))" "$MAX_TRIES"; sleep "$((count / 2))"; poetry version prerelease && poetry publish --build -r testpypi && break || let "count+=1"; done
    - if [ $count -ge $MAX_TRIES ]; then exit 1; fi
  only:
    - /^release\/.+$/

publish:
  stage: publish
  image: "registry.gitlab.com/nevrona/public/poetry-docker:1.1.4"
  variables:
    POETRY_VIRTUALENVS_CREATE: 0
  script:
    - poetry publish --build
    - sha256sum dist/*
    - sha512sum dist/*
  only:
    - tags
